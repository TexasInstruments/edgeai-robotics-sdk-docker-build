#  Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#    Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
#
#    Neither the name of Texas Instruments Incorporated nor the names of
#    its contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

ARG ARCH
ARG USE_PROXY
ARG HTTP_PROXY
ARG REPO_LOCATION
ARG DEBIAN_FRONTEND=noninteractive
ARG BASE_URL

#=========================================================================
# The environment variable REPO_LOCATION is set from outside as needed,
# based on network
FROM --platform=linux/${ARCH} ${REPO_LOCATION}arm64v8/ros:humble-perception-jammy AS base-0

#=========================================================================
FROM base-0 AS base-1
ARG USE_PROXY
ENV USE_PROXY=${USE_PROXY}
ARG HTTP_PROXY
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTP_PROXY}

#=========================================================================
FROM base-${USE_PROXY} AS ros-gst
ARG DEBIAN_FRONTEND
ARG BASE_URL

# setup proxy settings
ADD setup_proxy.sh /root/
ADD proxy /root/proxy
RUN /root/setup_proxy.sh

# intsall utils and miscellaneous packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    curl \
    git \
    vim \
    tmux \
    gdb \
    iputils-ping \
    usbutils \
    rsync \
    strace \
    sysstat \
    net-tools \
    dialog \
    chrony \
    nfs-common \
    corkscrew \
    v4l-utils \
    unzip \
    plocate && \
    rm -rf /var/lib/apt/lists/*

# install gstreamer dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgstreamer1.0-0 \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-good1.0-dev \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    gir1.2-gst-rtsp-server-1.0 \
    ninja-build && \
    rm -rf /var/lib/apt/lists/*

# install python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip && \
    python3 -m pip install --upgrade pip && \
    python3 -m pip install --no-cache-dir \
        meson \
        configparser \
        argparse && \
    rm -rf /var/lib/apt/lists/*

# install the gstreamer v4l2 library
WORKDIR /root/scripts
ADD install_gst_v4l2_lib.sh ./
RUN ./install_gst_v4l2_lib.sh

#=========================================================================
FROM ros-gst as j7ros-common
ARG DEBIAN_FRONTEND

# install dependency for tivision_apps.so
RUN apt-get update && apt-get install -y --no-install-recommends \
    libdevil-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y --no-install-recommends \
    ncurses-dev \
    libopencv-core-dev \
    libopencv-imgproc-dev \
    libopencv-imgcodecs-dev \
    libyaml-cpp-dev && \
    rm -rf /var/lib/apt/lists/*

# setup sources.list
RUN echo "deb http://packages.ros.org/ros2/ubuntu jammy main" > /etc/apt/sources.list.d/ros2-latest.list

# setup keys
# RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
# workaround in case apt-key above does not work, e.g., behind a proxy
RUN curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | gpg --dearmor -o /etc/apt/trusted.gpg.d/ros.gpg

# install additional ROS packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-rmw-cyclonedds-cpp \
    ros-humble-cv-bridge \
    ros-humble-image-transport \
    ros-humble-camera-info-manager \
    libeigen3-dev && \
    python3 -m pip install --no-cache-dir rosbags && \
    rm -rf /var/lib/apt/lists/*

# create a virtual environment and install dependencies for camera tools
# opencv-python<4.3 required (default version in Ubuntu 22.04 is not compatible)
COPY requirements.txt /root/camera_tools_requirements.txt
RUN apt-get update && apt-get install -y --no-install-recommends python3-venv && \
    python3 -m venv /opt/venv && \
    . /opt/venv/bin/activate && \
    pip install --no-cache-dir -r /root/camera_tools_requirements.txt && \
    rm /root/camera_tools_requirements.txt && \
    rm -rf /var/lib/apt/lists/*
